<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jonathan-fei.pro</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-05T01:25:25.483Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jonathan-fei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL基础</title>
    <link href="http://yoursite.com/2018/01/04/SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/01/04/SQL基础/</id>
    <published>2018-01-04T07:09:29.000Z</published>
    <updated>2018-01-05T01:25:25.483Z</updated>
    
    <content type="html"><![CDATA[<ul><li>SQL，Structure Query Language，结构化查询语言，是关系型数据库的应用语言。</li></ul><h3 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h3><ol><li>DDL（Data Defintion Language ）语句：数据定义语言，定义了不同的数据段、数据库、表、列、索引等数据库对象，常用的语句的关键字包括 create、drop、alter等。</li><li>DML（Data Manipulation Language）语句：数据操纵语句，用于增删改查数据库记录，并检查数据的完整性。关键词： insert、delete、update、select。</li><li>DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的许可。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。关键词：grant、revoke。</li></ol><h3 id="二、DDL语句"><a href="#二、DDL语句" class="headerlink" title="二、DDL语句"></a>二、DDL语句</h3><p>  DDL语句一般情况下是由数据库管理员（DBA）使用，与DML的最大区别是DML只对表内数据进行操作，而不设计表的定义、结构和修改。以下命令均为在指定数据库内操作，因此不用指明是在哪里数据库里新增等，若没有指定，则需要加上数据库的名称。</p><ol><li>创建数据库 - CREATE DATABASE dbname; （CREATE DATABASE 也可小写 ）</li><li>删除数据库 - DROP DATABASE dbname；</li><li><p>创建表 -</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE tablename（ column_name_1 column_type_1_constraints,</div><div class="line">                         column_name_2 column_type_2_constraints,</div><div class="line">                         ...</div><div class="line">                         column_name_n column_type_n_constraints）</div></pre></td></tr></table></figure><ul><li>查看表结构  ——  DESC tablename</li><li>更全面地查看表定义 —— <code>show create table tablename \G;</code>  这条命令可以看到创建表的SQL语句,其中“\G<br>”的意思是使得记录能够按照字段竖向排列，也就是改变我们看到的格式。</li></ul></li><li>删除表 - DROP TABLE tablename</li><li>修改表-</li></ol><ul><li>修改表类型（字段的类型）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE tablename MODIFY[COLUMN] column_definition [FIRST|AFTER col_name]</div></pre></td></tr></table></figure></li></ul><p>例如，在mysql环境下执行，<code>alter table emp modify ename varchar(20)</code>。</p><ul><li><p>增加表字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name ADD[COLUMN] column_definition [FIRST|AFTER col_name]</div></pre></td></tr></table></figure><p>例如， <code>alter table emp add column age int(3);</code></p></li><li>删除表字段 -<br>ALTER TABLE table_name DROP [COLUMN] col_name;例如， alter table emp drop column age；</li><li>字段改名 -<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE table_name CHANGE[COLUMN] old_col_name column_definition[FIRST|AFTER column_name]</div></pre></td></tr></table></figure></li></ul><p>例如，<code>alter table emp change age age1 int(4);</code><br>PS: chang与modify都可以修改列，但是change即可以修改列的名称，也可以修改列的类型，而modify只能修改列的类型。</p><ul><li>修改字段的顺序 -<br>例如，<code>alter table emp add age int(2) after name; alter table emp change age age1 int(4) first;</code></li><li>修改表名 -<br>ALTER TABLE table_name RENAME [TO] new_tablename,例如， <code>alter table emp rename emp1;</code></li></ul><h3 id="三、DML-语句"><a href="#三、DML-语句" class="headerlink" title="三、DML 语句"></a>三、DML 语句</h3><p>DML语句是指对数据库中表记录的操作，主要包括表记录的插入（insert）、更新（update）、删除（delete）和查询（select），是开发人员日常使用最频繁的操作。</p><h4 id="1-插入记录"><a href="#1-插入记录" class="headerlink" title="1- 插入记录"></a>1- 插入记录</h4><p>插入单条记录：<br>INSERT INTO  table_name(field1, field2, … fieldn) VALUES(value1, value2, …valuen);例如，insert into emp(ename, hire,sal,deptno) values(‘zzx1’, ‘2000-1-1’, ‘2000’,1); 也可以不用指定字段名称，但是需要values后面的循序与字段的顺序一致。</p><p>插入多条记录：<br>INSERT INTO tablename (field1, field2, … fieldn)<br>VALUES<br>(record1_value1, record2_value2, … record1_valuen),<br>(record2_value1, record2_value2, … record2_valuen),<br>…<br>(recordn_value1, recordn_value2, … recordn_valuen);<br>例如<code>insert into dept VALUES(5, “35”),(3,”232”);</code></p><h4 id="2-更新记录"><a href="#2-更新记录" class="headerlink" title="2- 更新记录"></a>2- 更新记录</h4><p>更新记录：<br>UPDATE tablename SET filed1= value1,field2= value2, … filedn=valuen [WHERE CONDITION],例如，`update emp set sal=4000 where ename=‘lisa’;``</p><p>更新多个表中的记录：<br>UPDATE t1,t2,…tn set t1.field=value1,tn.field=valuen [WHERE CONDITION]</p><h4 id="3-删除记录"><a href="#3-删除记录" class="headerlink" title="3- 删除记录"></a>3- 删除记录</h4><p>DELETE FROM tablename [WHERE CONDITION]<br>例如，<code>delete from emp where ename=‘lisa’;</code></p><p>删除多个表中的记录：<br>DELETE t1,t2,..tn FROM t1,t2,…tn [WHERE CONDITION]<br>PS: 不论是单表还是多表，不加where条件都会把表的所有记录删除；</p><h4 id="4-查询记录"><a href="#4-查询记录" class="headerlink" title="4- 查询记录"></a>4- 查询记录</h4><p>SELECT <em> FROM tablename [WHERE CONDITION]<br>例如,select </em> from emp;,为查询emp这个表中的所有字段。如果想要部分字段的话，需要分别写出各个字段的名字，例如 select ename from emp;</p><p>（1）查询重复记录<br>用到“distinct”,例如 <code>select distinct slaer from emp;</code></p><p>（2）条件查询<br>关键词：where，例如 <code>select * from emp where name=Lisa;</code><br>其中“=”也可以是&gt; &lt; &gt;= &lt;= != 多条件还可以使用or和and等逻辑运算符进行多条件联合查询。</p><p>（3）排列顺序和限制<br>语法如下：<code>SELECT * FROM tablename [WHERE CONDTION] [ORDER BY field1 [DESC/ASC],field2 [DESC/ASC],… fieldn [DESC/ASC]]</code>。 不写关键字默认我ASC(升序排序)。ORDER BY 后面可以跟不同的字段，每个字段可以有不同的排序。</p><p>对于排序后的记录，如果只希望显示一部分，这时就需要用到LIMIT关键字。语法如下：SELECT … [LIMIT offset_start,row_count]。 例如<code>select * from emp order by sal limit 3; select * from emp order by sal limit 1,3;</code></p><p>limit 经常和 order by 一起配合使用来进行记录的分页显示。</p><p>（4）聚合<br> 用于汇总操作，例如统计。语法如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT [field1,field2,…fieldn] fun_name</div><div class="line">FROM tablename</div><div class="line">[WHERE where_condition]</div><div class="line">[GROUP BY field1,field2,…fieldn</div><div class="line"> [WITH ROLLUP]]</div><div class="line">[HAVING where_condtion]</div></pre></td></tr></table></figure></p><p>其中：</p><ul><li>fun_name 表示要做的聚合操作，也就是聚合函数，常用的有sum count max min</li><li>GROUP BY 表示要进行分类聚合的字段，比如按照部分分类统计员工数量，部门就应该写在group by 后面</li><li>WITH ROLLUP是可选语法，表明是否对分类聚合后的结果进行再汇总</li><li>HAVING 表示对分类后的结果再进行条件的过滤。PS：having和where都是过滤，where是在聚合前过滤，having是对聚合后的结果过滤。</li></ul><p>统计总人数： <code>select count(1) from emp;</code><br>统计各个部门的人数： <code>select deptno,count(1) from emp group by deptno;</code><br>既统计部门人数又统计总人数：<code>select deptno.count(1) from emp group by deptno with rollup;</code><br>统计部门人数大于1的部门： <code>select deptno.count(1) from emp group by deptno having count(1)&gt;1;</code><br>统计公司所有员工的公司薪水总额、最高和最低薪水：<code>select sum(sal),max(sal),min(sal) from emp;</code></p><p>（5）表连接<br>表连接分为内连接和外链接，内连接仅仅选出两张表中互相匹配的记录，而外连接会选出其他不匹配的记录，最常用的是内连接。<br>例如，查询所有雇员的名字和所在的部门名称，因为雇员名称和部门分别放在表emp、dept中，因此需要使用表连接来查询。<code>select ename,deptno from emp,dept where emp.deptno=dept.deptno;</code></p><p>（6）子查询<br>某些情况下，当进行查询的时候，需要的条件是另外一个select语句的结果，这时就会用到子查询。关键字：in、not in、=、exists、not exists等,例如， <code>select * from emp where deptno in(select deptno from dept)</code>。<br>PS：表连接在很多情况下用于优化子连接。</p><h3 id="四、DCL语句"><a href="#四、DCL语句" class="headerlink" title="四、DCL语句"></a>四、DCL语句</h3><p>DCL语句主要是DBA用来管理系统中的对象权限时使用，开发人员很少使用，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql &gt;  grant all PRIVILEGES on db_name.* to <span class="string">'username'</span>@<span class="string">'xxx.xxx.xx.x'</span> identified by <span class="string">'password'</span> WITH GRANT OPTION;</div></pre></td></tr></table></figure></p><p>grant 为放出权限，select为收回权限。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;SQL，Structure Query Language，结构化查询语言，是关系型数据库的应用语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一、分类&quot;&gt;&lt;a href=&quot;#一、分类&quot; class=&quot;headerlink&quot; title=&quot;一、分类&quot;&gt;&lt;/a&gt;一、分
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL语句" scheme="http://yoursite.com/tags/SQL%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>数据库的事务与锁</title>
    <link href="http://yoursite.com/2018/01/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/"/>
    <id>http://yoursite.com/2018/01/03/数据库的事务与锁/</id>
    <published>2018-01-03T07:15:58.000Z</published>
    <updated>2018-01-03T07:39:57.375Z</updated>
    
    <content type="html"><![CDATA[<p>学习数据库的事务与锁之前需要先了解下什么是并发：</p><ul><li>多个用户对同一数据进行交互叫做并发。如果不加以控制，并发可能引起很多问题。数据库提供了可以合理解决并发问题的方案。</li></ul><h3 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h3><ul><li>事务的概念：类比于银行转账，A转给B100元，那么A的账户减少500，B的账户增加500元，这个两个操作必须全部执行，要么就全部不执行。数据库的的事务总是将指定的一条语句或多条语句看成一个全部执行或者全部不执行的最小组合全部组合。</li><li>事务类型：如SELECT INSERT UPDATE DELETE</li></ul><h4 id="1-显示事务处理模式"><a href="#1-显示事务处理模式" class="headerlink" title="1- 显示事务处理模式"></a>1- 显示事务处理模式</h4><p>通过START TRANSACTION 标记事务起始点，如果开启事务后执行的语句是按照期望正确执行的则以COMMIT TRANSACTION 来结束事务；如果开始事务后执行的语句结果不是所期望的，并希望取消刚才的操作，则以ROLLBACK TRANSATION 来结束事务，（相当于撤销），该动作成为回滚。前滚指的是再次执行一次事务中的操作。</p><h4 id="2-自动提交事务模式"><a href="#2-自动提交事务模式" class="headerlink" title="2- 自动提交事务模式"></a>2- 自动提交事务模式</h4><p>默认情况下，MySQL是自动提交的。在该模式下，每条语句都被认为是一个事务。当每个SQL语句执行完成后，不是被提交就是被回滚，如果执行成功则提交，执行失败则回滚。<br>注意：在该模式下，执行的语句如果出现编译错误（例如关键字错误）而非运行错误该批语句都不会执行，而不是执行后再回滚；如果是运行错误不会导致该批语句都不执行，而是错误语句会回滚，之前语句正常执行。</p><h4 id="3-隐式事务处理模式"><a href="#3-隐式事务处理模式" class="headerlink" title="3-隐式事务处理模式"></a>3-隐式事务处理模式</h4><p>可以通过    SET IMPLICIT_TRANSACTIONS ON 和 SET IMPLICIT_TRANSACTIONS OFF 来启动和关闭隐式模式。与显示事务处理模式相比，它省略了事务起始点，也就是START TRANSATION。</p><p>PS:事务也是可以嵌套的，这里不进行详细说明。</p><h3 id="二、并发访问引起的问题"><a href="#二、并发访问引起的问题" class="headerlink" title="二、并发访问引起的问题"></a>二、并发访问引起的问题</h3><p>并发：两个用户或者两个以上的用户在同一时间与同一对象进行交互。例如春节抢票，抢的人越多，并发数就越高，对系统性能要求就越高。</p><h4 id="1-丢失更新"><a href="#1-丢失更新" class="headerlink" title="1- 丢失更新"></a>1- 丢失更新</h4><pre><code>当两个或多个事务对同一数据最初的值进行更新时，由于每个事务都不知道其他事务的存在，最后提交的事务中的更新操作就会覆盖掉其他事务所做的更新，这就导致其他事务的更新操作丢失。</code></pre><h4 id="2-脏读"><a href="#2-脏读" class="headerlink" title="2- 脏读"></a>2- 脏读</h4><pre><code>事务完成数据更新后，这时其他事务去查询该行数据的时候读取的数据是临时的，如果最后更新的事务被回滚，这个临时数据对于查询的事务来说就是“脏数据”。</code></pre><h4 id="3-不可重复读"><a href="#3-不可重复读" class="headerlink" title="3- 不可重复读"></a>3- 不可重复读</h4><pre><code>在一个事务两次的查询之间，同一数据被其他事务更新，导致同一事务中的两次查询结果不同，这样的现象叫做不可重复读。确定的某条记录。</code></pre><h4 id="4-幻影读"><a href="#4-幻影读" class="headerlink" title="4- 幻影读"></a>4- 幻影读</h4><pre><code>一个事务中指定范围的两次查询结果因为其他事务更新了符合范围的数据，导致两次结果查询结果不同，这样的现象叫做幻影读。幻影读不仅仅只适用于符合条件的范围内的记录有多少，还适用于涉及到范围概念的情况。与范围数据有关。</code></pre><h3 id="三、锁"><a href="#三、锁" class="headerlink" title="三、锁"></a>三、锁</h3><p>锁，即锁定，在数据库的概念为：在哪些数据或者对象上获取了锁就对对应的数据或者对象进行了锁定，其他事务就无法获取和现有锁相冲突的锁。锁是事务用来保护与自己交互的数据或者对象不受其他事务干扰的机制，实现了事务与事务之间的隔离。正是因为锁的存在，才可以根据业务需求合理地解决并发访问带来的问题。</p><h4 id="1-锁的粒度与锁升级"><a href="#1-锁的粒度与锁升级" class="headerlink" title="1- 锁的粒度与锁升级"></a>1- 锁的粒度与锁升级</h4><p>数据库可以在某一行获取锁，也可以对某一张表获取锁，也可以对整个数据库获取锁。这种多层次的锁结构成为锁的粒度。锁的粒度越粗，并发度越低，系统性能越高。<br>下面可以申请锁的粒度类型：</p><ul><li>行或行标识符（RID）：属于行级锁（InnoDB），用于锁定堆中某个行的行标识符。</li><li>键（Key）：属于行级锁，在索引的键上存放锁，用户保护事务中的键的范围。</li><li>页（Page）：锁定该页中的所有数据或键。</li><li>区（Excent）：锁定整个区段，包括里面的页以及页中的数据行和键。</li><li>表（Table）：锁定整个表以及与表关联的所有对象，如表中的数据行、索引键。</li><li>数据库（Database）：锁定整个数据库。</li></ul><p>由低层次的锁升级到高层次的锁成为锁升级。</p><h4 id="2-锁的类型"><a href="#2-锁的类型" class="headerlink" title="2- 锁的类型"></a>2- 锁的类型</h4><p>数据库引擎基于事务类型选择不同的锁，这些锁决定了并发事件访问资源的方式。此处只列出三种类型的锁。</p><p>（1）共享锁（S锁）<br>共享锁用于只需要读取不需要进行修改或更新数据的操作，如SELECT语句就是一种最基本常见的申请共享锁的语句。共享锁避免了不可重复读与幻影读问题。</p><p>（2）独占锁（X锁）<br>独占锁也成为排他锁。与其他所有的锁都冲突。当需要进行数据更改操作如INSERT、UPDATE、DELETE时，锁管理器就会分配X锁。一般情况下，数据修改时包含两个动作：读取需要的数据和修改数据，因此在数据修改时会申请共享锁和独占锁。在同一张表中修改数据，此时共享锁更应该成为更新锁，但是如果更新操作连接了其他表，那么其他表中就会存在共享锁，并在需要的数据上申请独占锁。</p><p>（3）更新锁（U锁）<br>更新锁和共享锁兼容，和独占锁冲突。更新锁和更新锁也冲突。修改数据时会先申请更新锁后申请独占锁， 更新锁是一种过渡锁。在进行数据搜索时持有了更新锁，由于更新锁和共享锁兼容，因此此时其他事务是允许读取数据的，当确定修改数据后，更新锁等待其他事务的共享锁释放后就会转换为独占锁（那么等待时间如何计算？），并将其他事务的相关资源的锁申请全部队列化堵在数据修改的进程外，直到独占锁释放，其他事务才能进行相关资源的申请。</p><ul><li>死锁：两个事务都在等待一个资源，但同时又相互阻止对方获取资源，这时就会发生死锁现象。例如，事务A和事务B都获取了某一行数据的共享锁（也就是可以查看该数据），当事务A想修改该数据时要将共享锁转化为独占锁，这就需要等待事务B释放共享锁，但是事务B也想修改数据，将共享锁转换为独占锁，它将等待事务A释放共享锁，这样两个事务之间形成了僵局。</li></ul><p>更新锁和共享锁是兼容的，因此更新锁和共享锁可能在同一资源上相互共存，但是更新锁和更新锁是相互冲突的，所以只能有一个事务对数据有更新锁。在过度为独占锁前，只有更新锁的事务必须先等待其他事务释放所有的共享锁，这就避免了上述的死锁问题。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn3fvadb3uj30io0f60tm.jpg" alt=""></p><h3 id="四、事务隔离级别"><a href="#四、事务隔离级别" class="headerlink" title="四、事务隔离级别"></a>四、事务隔离级别</h3><p>在数据库系统中可以通过设置事务隔离级别间接地控制锁，实现事务之间的隔离，从而解决并发问题。事务隔离级别是并发控制的整体解决方案，其实质是通过控制锁来控制事务之间如何进行隔离。</p><h4 id="1-提交读（READ-COMMITTED）"><a href="#1-提交读（READ-COMMITTED）" class="headerlink" title="1- 提交读（READ COMMITTED）"></a>1- 提交读（READ COMMITTED）</h4><p>查询申请的共享锁在语句执行完毕后就释放，不需要等待事务结束后释放；数据修改申请的独占锁一直持有，直到事务结束才释放。设置提交读，可以避免脏读问题，但是不能解决不可重复读和幻影读。</p><p>PS：设置事务隔离级别和查看。隔离级别的设置是对会话级别的，所以只对当前会话有效。</p><h4 id="2-可提交读（READ-UNCOMMITTED）"><a href="#2-可提交读（READ-UNCOMMITTED）" class="headerlink" title="2- 可提交读（READ UNCOMMITTED）"></a>2- 可提交读（READ UNCOMMITTED）</h4><p>未提交读是控制级别最低的级别，设置之后，该会话的所有读操作将不申请共享锁，因此读时将忽略所有的锁，但是更新时仍然会申请独占锁，这种情况下并发带来的问题都有可能发生。</p><h4 id="3-可重复读（REPEATABLE-READ）"><a href="#3-可重复读（REPEATABLE-READ）" class="headerlink" title="3- 可重复读（REPEATABLE READ）"></a>3- 可重复读（REPEATABLE READ）</h4><p>MySQL默认事务隔离级别，当设置为可重复读隔离级别时，除了独占锁会一直保持到事务结束，共享锁也一样到事务结束。可重复读隔离级别下，脏读、丢失的更新和不可重复读问题都能够避免，但是也因为共享锁一直持有，会导致其他事务不能对相关数据进行修改，降低了并发度和性能。可重复读隔离级别无法解决幻影读问题。</p><h4 id="4-串行化（SERIALIZABLE）"><a href="#4-串行化（SERIALIZABLE）" class="headerlink" title="4- 串行化（SERIALIZABLE）"></a>4- 串行化（SERIALIZABLE）</h4><p>串行化隔离级别隔离层次最高，它能够避免丢失的更新、脏读、不可重复读和幻影读问题。设置为串行化隔离级别后，共享锁也将一直持有到事务结束。比可重复读更严格的是它的锁定是范围的，还包括潜在的数据修改。它保证了范围内两次查询结果不会出现增加记录或减少记录而出现幻象。</p><p>串行化隔离级别对锁控制的方式为：如果在查询指定条件的列上有索引，则在该列符合条件的范围记录上加上KEY粒度的锁，如果在查询条件的列上没有索引，则直接在表上加上共享锁。</p><h3 id="五、隔离级别、锁和并发问题的关系"><a href="#五、隔离级别、锁和并发问题的关系" class="headerlink" title="五、隔离级别、锁和并发问题的关系"></a>五、隔离级别、锁和并发问题的关系</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn3fy4h8fmj314g0ewdnm.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习数据库的事务与锁之前需要先了解下什么是并发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个用户对同一数据进行交互叫做并发。如果不加以控制，并发可能引起很多问题。数据库提供了可以合理解决并发问题的方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一、事务&quot;&gt;&lt;a href=&quot;#一、事务&quot; 
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库事务" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="数据库的锁" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>网络基础-HTTP</title>
    <link href="http://yoursite.com/2018/01/02/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80-HTTP/"/>
    <id>http://yoursite.com/2018/01/02/网络基础-HTTP/</id>
    <published>2018-01-02T14:25:13.000Z</published>
    <updated>2018-01-02T15:10:39.828Z</updated>
    
    <content type="html"><![CDATA[<p>最近Rails项目部署的过程中遇到网络端口的问题及用到了http网络协议的知识，于是决定对这块知识进行回顾和重新梳理，这里推荐韩立刚老师的《计算机网络原理》一书，讲的很明白。以下为这次学习到的主要内容：</p><ul><li>HTTP( Hyper Text Transfer Protocol)</li><li><p>WWW( World Wide Web),互联网上的网站共同组成万维网。</p></li><li><p>URL( Uniform Resource Locator)，统一资源定位符，网站的网址。URL一般由四个部分组成：&lt;协议&gt;://&lt;主机&gt;:&lt;/端口&gt;/&lt;路径&gt;，例如<a href="http://106.14.190.181:80/wx" target="_blank" rel="external">http://106.14.190.181:80/wx</a></p></li></ul><h3 id="一、HTTP协议版本："><a href="#一、HTTP协议版本：" class="headerlink" title="一、HTTP协议版本："></a>一、HTTP协议版本：</h3><p>1-  HTTP1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，既不跟踪每个客户也不记录过去的请求。</p><p>2-  HTTP1.1支持持续连接，即服务器在发送响应后，仍然在一段时间内保持这条TCP连接，使得同一个浏览器和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。HTTP1.1的持续连接有两种工作方式，即非流水线方式和流水线方式。非流水线方式（理解为迅雷一次只能下载一个文件）的特点是客户在收到前一个响应后才能发送写一个请求。因此，在TCP连接建立后，客户每访问一次对象都要用去一个往返时间RTT，这种方式浪费服务器资源。流水线的特点（理解为迅雷一次可以下载多个文件）是客户在收到HTTP响应报文之前就能够发送新的请求报文。于是一个接一个的请求报文到达服务器后，服务器就可连续发回响应报文，这种方式使TCP连接中的空闲时间减少，提高了文档的下载效率。</p><p>3-  HTTP请求报文与响应报文<br>（1） 请求报文：从客户端向服务器发送请求报文<br>           请求报文由三个部分组成：分别是请求行，首部行，实体主体。请求报文的第一行“请求行”只有三个内容，即方法、请求资源的URL，以及HTTP的版本。方法就是对对象的操作，HTTP1.1协议中定义了八中方法，来表明对Request-URL指定资源的不同操作方式：GET、POST、PUT、DELETE、HEAD、TRACE、CONNECT、OPPIONS<br>（2）响应报文：从服务器到达客户端的应答</p><h3 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h3><p>HTTP是一种无状态的协议，当你注册登录一个网站后，当下次再打开这个网站后，需要再次输入账号与密码进行身份验证，服务器仅从网络连接上无从知道你的曾经登录的身份。如果希望服务器读取你的曾经登录的身份，那就需要在用户输入账号和密码后，服务器在用户的计算机存放一个通行证，来记录用户的身份和状态。以后再访问，网站（服务器）就会先读取客户端的通行证。服务器存放在客户端（浏览器）的通行证通常被称为cookie。</p><p>cookie实际上是一小段的文本信息（说明可以进行拷贝，也就是在其他浏览器导入cookie之后不用输入账号和密码就可以登录了）。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie，客户端把浏览器会把cookie保存起来。当浏览器再请求该网站时，浏览器吧请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户身份和状态。服务器还可以根据需要修改cookie的内容。</p><h3 id="三、通过代理服务器访问网站"><a href="#三、通过代理服务器访问网站" class="headerlink" title="三、通过代理服务器访问网站"></a>三、通过代理服务器访问网站</h3><p>代理服务器英文全称为Proxy Server，其功能就是代理网络用户去取得网络信息。我们可以配置计算机通过Web代理服务器访问Web站点，而不直接访问网站。</p><p>使用代理服务器的场景：<br>（1）使用代理服务器，绕过防火墙封锁。<br>国内不允许网民访问国外的非法网站，在我国的防火墙上设置了拦截到这些网站的流量。但是国外有很多的web代理服务器，国内用户可以设置浏览器使用国外的代理商服务器，然后访问非法网站，就能成功。现在有很多“翻墙”软件，其实质就是使用国外代理服务器绕过国内封锁，故称为“翻墙”。<br>（2）提高访问速度<br>通常代理服务器可以缓存用户访问过的内容，当其他用户再访问相同的URL时，由代理服务器直接从缓存中找到要访问的信息，传给用户，已提高访问速度。例如，在企业内网部署一个Web代理服务器，能节省上网带宽。<br>（3）隐藏真实IP<br>上网者也可以通过这种方法隐藏自己的IP。有些网站的论坛会记录发帖人的IP地址。如果你不打算让论坛记录你真是的IP地址，就可以使用代理服务器访问该网站，发帖，这样只会记录下代理的地址，从而隐藏自己的IP地址。</p><p>国内外有很多免费的代理服务器，例如西刺免费代理。上面可以看到免费的代理服务器，在浏览器中设置使用这些代理服务器访问Internet。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近Rails项目部署的过程中遇到网络端口的问题及用到了http网络协议的知识，于是决定对这块知识进行回顾和重新梳理，这里推荐韩立刚老师的《计算机网络原理》一书，讲的很明白。以下为这次学习到的主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP( Hyper Text Trans
      
    
    </summary>
    
      <category term="网络基础" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络基础" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="超文本协议" scheme="http://yoursite.com/tags/%E8%B6%85%E6%96%87%E6%9C%AC%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>注册与登录</title>
    <link href="http://yoursite.com/2017/12/21/%E6%B3%A8%E5%86%8C%E4%B8%8E%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2017/12/21/注册与登录/</id>
    <published>2017-12-21T13:15:56.000Z</published>
    <updated>2017-12-30T12:24:12.991Z</updated>
    
    <content type="html"><![CDATA[<p>rails 中的gem devise提供了注册与登录的功能，用起来比较方便。但是为了自身编程能力，决定学习如何自写出注册与登录功能。</p><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><p>用户注册即创建一个用户，这时会用到我们所熟知的CRUD。理解起来很容易，但是做起来并没有那么简单。</p><p>首先需要生成user的model，并对其字段进行约束，通常情况下，会是name与email，例如name与email都不为空、长度、格式，为邮箱加索引等，把这些设置好之后，需要设置路由，控制器，还有视图。</p><h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><p>约束字段。例如name与email的长度、格式、不为空，密码长度等，且为邮箱加索引。</p><h5 id="routes-rb"><a href="#routes-rb" class="headerlink" title="routes.rb"></a>routes.rb</h5><p>设置注册路由，一般会是<code>get &#39;/signup&#39;, to: &#39;users#new&#39;</code> <code>post &#39;/signup&#39;, to: &#39;users#create&#39;</code></p><h5 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h5><p>设置注册表单。其中会用到<code>form_for</code>或者 <code>simple_form_for</code></p><h5 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h5><p>编写<code>users#new</code>与 <code>users#create</code></p><h5 id="验证用户"><a href="#验证用户" class="headerlink" title="验证用户"></a>验证用户</h5><p>验证用户会用密码，因为我们会为user增加一个字段名称<code>password_digest</code>，在user的model中，添加<code>has_secure_password</code>这个方法（因为has_secure_password这个方法调用唯一要求就是对应的model中有<code>password_digest</code> 字段），它有三个作用: (1) 在数据库层中的password_digest中存储安全的密码哈希值（2）获得一对虚拟属性，<code>password</code> <code>password_confirmation</code>,而且创建对象时会执行存在性验证和匹配验证（3）获得<code>authenticate</code>方法，如果密码正确，返回用户对象，如果密码错误，返回false。 要想生成不可逆的密码哈希值，我们需要用到<code>gem &#39;bcrypt&#39;</code>,它的作用就是生成哈希密码值。这样即使‘脱库’，用户的真实密码也不会丢失。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;rails 中的gem devise提供了注册与登录的功能，用起来比较方便。但是为了自身编程能力，决定学习如何自写出注册与登录功能。&lt;/p&gt;
&lt;h3 id=&quot;注册功能&quot;&gt;&lt;a href=&quot;#注册功能&quot; class=&quot;headerlink&quot; title=&quot;注册功能&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
      <category term="用户系统" scheme="http://yoursite.com/tags/%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>部分gem总结</title>
    <link href="http://yoursite.com/2017/09/07/%E9%83%A8%E5%88%86gem%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/09/07/部分gem总结/</id>
    <published>2017-09-06T17:54:55.000Z</published>
    <updated>2018-01-02T15:14:07.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-gem-‘devise’-————————————-登录系统"><a href="#1-gem-‘devise’-————————————-登录系统" class="headerlink" title="1.gem ‘devise’             ————————————  登录系统"></a>1.gem ‘devise’             ————————————  登录系统</h3><blockquote><p><strong>安装须知：</strong> 依次执行<code>bundle install</code> <code>rails g devise:install</code> <code>rails g devise user</code> <code>rake db:migrate</code>，最后重新<code>rails s</code>。</p></blockquote><h3 id="2-gem-‘bootstrap’-————————————-前端开发套件"><a href="#2-gem-‘bootstrap’-————————————-前端开发套件" class="headerlink" title="2.gem ‘bootstrap’          ————————————  前端开发套件"></a>2.gem ‘bootstrap’          ————————————  前端开发套件</h3><blockquote><p><strong>安装须知：</strong><br>(1) 依次执行<code>bundle install</code> <code>mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss</code>;<br>(2)</p></blockquote><figure class="highlight ruby"><figcaption><span>app/assets/stylesheets/application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+@import <span class="string">"bootstrap-sprockets"</span>;</div><div class="line">+@import <span class="string">"bootstrap"</span>;</div></pre></td></tr></table></figure><p>最后重新<code>rails s</code></p><h3 id="3-gem-‘simple-form’-————————————-简化表单"><a href="#3-gem-‘simple-form’-————————————-简化表单" class="headerlink" title="3.gem ‘simple_form’        ————————————  简化表单"></a>3.gem ‘simple_form’        ————————————  简化表单</h3><blockquote><p><strong>安装须知：</strong> 依次执行<code>bundle install</code> <code>rails g simple_form:install --bootstrap</code>,最后重新<code>rails s</code></p></blockquote><h3 id="4-gem-‘font-awesome-rails’-————————————-图标套件"><a href="#4-gem-‘font-awesome-rails’-————————————-图标套件" class="headerlink" title="4.gem ‘font-awesome-rails’ ————————————  图标套件"></a>4.gem ‘font-awesome-rails’ ————————————  图标套件</h3><blockquote><p><strong>安装须知</strong></p></blockquote><p>（1）<code>bundle install</code> ,重新<code>rails s</code><br>（2）</p><figure class="highlight ruby"><figcaption><span>app/assets/stylesheets/application.scss</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"font-awesome"</span>;</div></pre></td></tr></table></figure><h3 id="5-gem-‘better-errors’-————————————-更好的显示错误讯息"><a href="#5-gem-‘better-errors’-————————————-更好的显示错误讯息" class="headerlink" title="5.gem ‘better_errors’      ————————————  更好的显示错误讯息"></a>5.gem ‘better_errors’      ————————————  更好的显示错误讯息</h3><blockquote><p><strong>安装须知</strong> <code>bundle install</code> 重启<code>rails s</code></p></blockquote><h3 id="6-gem-‘annotate’-————————————-在主要用于model中显示栏位"><a href="#6-gem-‘annotate’-————————————-在主要用于model中显示栏位" class="headerlink" title="6.gem ‘annotate’           ————————————  在主要用于model中显示栏位"></a>6.gem ‘annotate’           ————————————  在主要用于model中显示栏位</h3><blockquote><p><strong>安装须知</strong> <code>bundle install</code> 重启<code>rails s</code><br>执行<code>annotate --exclude tests,fixtures,factories,serializers</code>,<br>ps：每次新增栏位后，都要执行这个命令，才会在具体model里显示出所有建立的栏位提示。</p></blockquote><h3 id="7-gem-‘awesome-rails-console’-—————————-让“金手指”变好看的套件"><a href="#7-gem-‘awesome-rails-console’-—————————-让“金手指”变好看的套件" class="headerlink" title="7.gem ‘awesome_rails_console’      —————————-  让“金手指”变好看的套件"></a>7.gem ‘awesome_rails_console’      —————————-  让“金手指”变好看的套件</h3><blockquote><p><strong>安装须知</strong> <code>bundle install</code> 重启<code>rails s</code></p></blockquote><h3 id="8-gem-‘carrier-wave’-gem-‘mini-magick’-————————————-用于上传图片（可能还有其他的功能）"><a href="#8-gem-‘carrier-wave’-gem-‘mini-magick’-————————————-用于上传图片（可能还有其他的功能）" class="headerlink" title="8.gem ‘carrier_wave’  gem ‘mini_magick’      ————————————  用于上传图片（可能还有其他的功能）"></a>8.gem ‘carrier_wave’  gem ‘mini_magick’      ————————————  用于上传图片（可能还有其他的功能）</h3><blockquote><p><strong>安装须知</strong> 依次执行：<code>bundle install</code> <code>rails g uploader image</code> 重启<code>rails s</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-gem-‘devise’-————————————-登录系统&quot;&gt;&lt;a href=&quot;#1-gem-‘devise’-————————————-登录系统&quot; class=&quot;headerlink&quot; title=&quot;1.gem ‘devise’             —
      
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
      <category term="Gem" scheme="http://yoursite.com/tags/Gem/"/>
    
  </entry>
  
  <entry>
    <title>两种方法实现收藏或者点赞功能</title>
    <link href="http://yoursite.com/2017/09/07/%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%94%B6%E8%97%8F%E6%88%96%E8%80%85%E7%82%B9%E8%B5%9E%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/09/07/两种方法实现收藏或者点赞功能/</id>
    <published>2017-09-06T16:30:24.000Z</published>
    <updated>2018-01-02T14:24:18.694Z</updated>
    
    <content type="html"><![CDATA[<p>收藏功能与点赞功能的实作十分类似，本文以购物车教程实作收藏功能为例。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><h5 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h5><p>一个用户可以收藏多个商品，一个商品可以被收藏很多次，因此这是多对多的关系。因此需要新增一个model，来当做product与suer的桥梁。<code>$ rails g model collect user_id:integer product_id:integer</code>,然后执行 <code>rake db:migrate</code>，然后为collect、user与product这三个model加上关联。</p><figure class="highlight ruby"><figcaption><span>app/models/collect.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   + belongs_to <span class="symbol">:user</span></div><div class="line">   + belongs_to <span class="symbol">:product</span></div><div class="line"><span class="string">``</span><span class="string">`   </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span> ruby app/models/product.rb</div><div class="line"></div><div class="line">   + has_many <span class="symbol">:collects</span></div><div class="line">   + has_many <span class="symbol">:collected_users</span>, <span class="symbol">through:</span> <span class="symbol">:collects</span>, <span class="symbol">source:</span> <span class="symbol">:user</span></div></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>app/models/user.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   + has_many <span class="symbol">:collects</span></div><div class="line">   + has_many <span class="symbol">:collected_products</span>, <span class="symbol">through:</span> <span class="symbol">:collects</span>, <span class="symbol">source:</span> <span class="symbol">:product</span></div><div class="line"></div><div class="line">   <span class="comment">#加上是否收藏商品的判定</span></div><div class="line">   + <span class="function"><span class="keyword">def</span> <span class="title">is_collect_of?</span><span class="params">(product)</span></span></div><div class="line">   +  collected_products.<span class="keyword">include</span>?(product)</div><div class="line">   + <span class="keyword">end</span></div><div class="line"><span class="string">``</span><span class="string">`    </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#### step2</span></div><div class="line"><span class="string">首先修改路由信息：</span></div><div class="line"><span class="string">`</span><span class="string">``</span> ruby config/routes.rb</div><div class="line"></div><div class="line">  + resources <span class="symbol">:product</span> <span class="keyword">do</span></div><div class="line">   +  member <span class="keyword">do</span></div><div class="line">   +    post <span class="symbol">:collect</span></div><div class="line">   +    post <span class="symbol">:uncollect</span></div><div class="line">   + <span class="keyword">end</span></div><div class="line"> +  <span class="keyword">end</span></div></pre></td></tr></table></figure><p>在controller里加上对应的method，</p><figure class="highlight ruby"><figcaption><span>app/controllers/product_controllers.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ <span class="function"><span class="keyword">def</span><span class="title">collect</span></span></div><div class="line"> + @product = Product.find(params[<span class="symbol">:id</span>])</div><div class="line"> + current_user.collected_products &lt;&lt; @product</div><div class="line"> + flash[<span class="symbol">:notice</span>] = <span class="string">"成功收藏商品"</span></div><div class="line"> + redirect_to <span class="symbol">:back</span></div><div class="line">+ <span class="keyword">end</span></div><div class="line"></div><div class="line">+ <span class="function"><span class="keyword">def</span> <span class="title">uncollect</span></span></div><div class="line"> + @product = Product.find(params[<span class="symbol">:id</span>])</div><div class="line"> + currrent_user.collected_products.delete(@product)</div><div class="line"> + flash[<span class="symbol">:warning</span>] = <span class="string">"您已取消收藏该商品"</span></div><div class="line"> + redirect_to <span class="symbol">:back</span></div><div class="line">+ <span class="keyword">end</span></div></pre></td></tr></table></figure><h4 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h4><p>在views中的相应位置加入收藏的显示</p><figure class="highlight ruby"><figcaption><span>app/views/products/show.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ &lt;% <span class="keyword">if</span> current_user &amp;&amp; current_user.is_collect_of?(@product) %&gt;</div><div class="line">+  &lt;%= link_to(“取消收藏”, uncollect_product_path(@product), <span class="symbol">:method</span> =&gt; <span class="symbol">:post</span>, <span class="class"><span class="keyword">class</span>: "<span class="title">btn</span> <span class="title">btn</span>-<span class="title">danger</span> <span class="title">btn</span>-<span class="title">lg</span>" )%&gt;</span></div><div class="line">+ &lt;% <span class="keyword">else</span> %&gt;</div><div class="line">+  &lt;%= link_to(<span class="string">"收藏“, collect_product_path(@product), :method =&gt; :post, class: "</span>btn btn-danger btn-lg<span class="string">" )%&gt;</span></div><div class="line"><span class="string">+ &lt;% end %&gt;</span></div></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><h4 id="step1-1"><a href="#step1-1" class="headerlink" title="step1"></a>step1</h4><p>同样，终端执行 <code>rails g model colloect</code>, 编辑 <code>db/migrate/XXXXXXXX_create_collects.rb</code><br><figure class="highlight ruby"><figcaption><span>db/migrate/XXXXXXXX_create_collects.rb    </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CreateCollects</span> &lt; ActiveRecord::Migration[5.0]</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></div><div class="line">      create_table <span class="symbol">:collects</span> <span class="keyword">do</span> <span class="params">|t|</span></div><div class="line">+       t.integer <span class="symbol">:user_id</span>, <span class="symbol">:index</span> =&gt; <span class="literal">true</span></div><div class="line">+       t.integer <span class="symbol">:product_id</span>, <span class="symbol">:index</span> =&gt; <span class="literal">true</span></div><div class="line">        t.timestamps</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure></p><p>之后执行 <code>rake db:migrate</code></p><p>编辑<code>app/models/collect.rb</code>,加上关联<br><figure class="highlight ruby"><figcaption><span>app/models/collect.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ belongs_to <span class="symbol">:user</span></div><div class="line">+ belongs_to <span class="symbol">:product</span></div></pre></td></tr></table></figure></p><p>编辑 <code>app/models/product.rb</code>,加上关联<br><figure class="highlight ruby"><figcaption><span>app/models/product.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  + has_many <span class="symbol">:collects</span>, <span class="symbol">:dependent</span> =&gt; <span class="symbol">:destroy</span></div><div class="line">  + had_many <span class="symbol">:collected_users</span>, <span class="symbol">through:</span> <span class="symbol">:collects</span>, <span class="symbol">source:</span> <span class="symbol">:user</span></div><div class="line"></div><div class="line">  + <span class="function"><span class="keyword">def</span> <span class="title">find_collect</span><span class="params">(user)</span></span></div><div class="line">   +  <span class="keyword">self</span>.collects.where( <span class="symbol">:user_id</span> =&gt; user.id).first</div><div class="line">  + <span class="keyword">end</span></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">编辑 `</span>app/model/user.rb<span class="string">`,加上关联</span></div><div class="line"><span class="string">`</span><span class="string">``</span> ruby app/models/user.rb</div><div class="line">  +  has_many <span class="symbol">:collects</span>, <span class="symbol">:dependent</span> =&gt; <span class="symbol">:destroy</span></div><div class="line">  +  has_many <span class="symbol">:collected_products</span>, <span class="symbol">through:</span> <span class="symbol">:collects</span>,  <span class="symbol">source:</span> <span class="symbol">:product</span></div></pre></td></tr></table></figure></p><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>编辑路由信息<br><figure class="highlight ruby"><figcaption><span>config/routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ resource <span class="symbol">:products</span> <span class="keyword">do</span></div><div class="line">+   member <span class="keyword">do</span></div><div class="line">+     post <span class="symbol">:collect</span></div><div class="line">+     post <span class="symbol">:uncollect</span></div><div class="line">+   <span class="keyword">end</span></div><div class="line">+ <span class="keyword">end</span></div></pre></td></tr></table></figure></p><p>在controller中添加：<br><figure class="highlight ruby"><figcaption><span>app/controllers/product_controller.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+ <span class="function"><span class="keyword">def</span> <span class="title">collect</span></span></div><div class="line">  + @product = Product.find(params[<span class="symbol">:id</span>])    </div><div class="line">  + <span class="keyword">unless</span> @product.find_collect(cuurent_user)</div><div class="line">  +   Collect.create( <span class="symbol">:user</span> =&gt; current_user, <span class="symbol">:product</span> =&gt; @product)</div><div class="line">  + flash[<span class="symbol">:notice</span>] = <span class="string">"您已成功收藏该商品"</span></div><div class="line">  + <span class="keyword">end</span></div><div class="line">  + redirect_to <span class="symbol">:back</span></div><div class="line">+ <span class="keyword">end</span></div><div class="line"></div><div class="line">+ <span class="function"><span class="keyword">def</span> <span class="title">uncollect</span></span></div><div class="line">   + @product = Product.find(params[<span class="symbol">:id</span>])</div><div class="line">   + collect = @product.find_collect(current_user)</div><div class="line">   + collect.destroy</div><div class="line">   + flash[<span class="symbol">:warning</span>] = <span class="string">"您已取消收藏该商品"</span></div><div class="line">   + redirect_to <span class="symbol">:back</span></div><div class="line">+ <span class="keyword">end</span></div></pre></td></tr></table></figure></p><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>最后一歩，就是要在 <code>app/views/products/show.html.erb</code>中加上收藏的按钮</p><figure class="highlight ruby"><figcaption><span>app/views/products/show.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">……略</div><div class="line"> + &lt;% <span class="keyword">if</span> current_user %&gt;</div><div class="line"> +   &lt;% <span class="keyword">if</span> @product.find_collect(current_user)%&gt;</div><div class="line"> +     &lt;% =link_to(<span class="string">"取消收藏"</span>, uncollect_product_path(@product), <span class="symbol">:method</span> =&gt; <span class="symbol">:post</span>, <span class="class"><span class="keyword">class</span>: "<span class="title">btn</span> <span class="title">btn</span>-<span class="title">danger</span> <span class="title">btn</span>-<span class="title">lg</span>")%&gt;</span></div><div class="line"> +   &lt;% <span class="keyword">else</span> %&gt;</div><div class="line"> +     &lt;%= link_to(<span class="string">"收藏"</span>, collect_product_path(@product), <span class="symbol">:method</span> =&gt; <span class="symbol">:post</span>, <span class="class"><span class="keyword">class</span>: "<span class="title">btn</span> <span class="title">btn</span>-<span class="title">primary</span> <span class="title">btn</span>-<span class="title">lg</span>")%&gt;</span></div><div class="line"> +   &lt;% <span class="keyword">end</span> %&gt;</div><div class="line"> + &lt;% <span class="keyword">end</span> %&gt;</div><div class="line">……略</div></pre></td></tr></table></figure><h3 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgv9zutcveg30rr0i9jwo.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收藏功能与点赞功能的实作十分类似，本文以购物车教程实作收藏功能为例。&lt;/p&gt;
&lt;h3 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h3&gt;&lt;h5 id=&quot;step1&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>利用ransack做搜索功能</title>
    <link href="http://yoursite.com/2017/09/07/%E5%88%A9%E7%94%A8ransack%E5%81%9A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/09/07/利用ransack做搜索功能/</id>
    <published>2017-09-06T16:27:42.000Z</published>
    <updated>2017-12-30T15:30:27.831Z</updated>
    
    <content type="html"><![CDATA[<p>本篇教程基于自己的一个小项目，用户可以搜索网站上其他用户发表过的文章。</p><h3 id="第一歩："><a href="#第一歩：" class="headerlink" title="第一歩："></a>第一歩：</h3><p><strong>安装gem ransack</strong></p><blockquote><p>ransack会用数据库的LIKE语法来做搜寻，虽然比较方便，但它会依次检查资料是否符合，而不会使用数据库的索引。如果数据比较庞大的话，利用ransack将不会是一个好的选择。这时候我们就可以安装专门的全文搜索引擎，例如<a href="https://www.elastic.co/cn/" target="_blank" rel="external">Elasticsearch</a></p></blockquote><figure class="highlight ruby"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+  gem <span class="string">'ransack'</span></div></pre></td></tr></table></figure><p><code>$ bundle</code>，重启 rails s</p><h3 id="第二歩"><a href="#第二歩" class="headerlink" title="第二歩"></a>第二歩</h3><p><strong>controller与config的设定</strong></p><h4 id="1、设置路由"><a href="#1、设置路由" class="headerlink" title="1、设置路由"></a>1、设置路由</h4><figure class="highlight ruby"><figcaption><span>config/routes.rb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  Rails.application.routes.draw <span class="keyword">do</span></div><div class="line">    devise_for <span class="symbol">:users</span></div><div class="line">    resources <span class="symbol">:posts</span> <span class="keyword">do</span></div><div class="line">   +   collection <span class="keyword">do</span>    <span class="comment">#我们会搜索出所有符合关键字的文章，结果为复数，因此用collection，而不是member</span></div><div class="line">   +     get <span class="symbol">:search</span></div><div class="line">   +   <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span>  </div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#### 2、设置controller</span></div><div class="line"><span class="string">主要设置通过哪些关键词进行搜索。</span></div><div class="line"><span class="string">`</span><span class="string">``</span>ruby app/controllers/posts_controller.rb</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> &lt; ApplicationController</span></div><div class="line">    before_action <span class="symbol">:validate_search_key</span>, <span class="symbol">only:</span> [<span class="symbol">:search</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span></span></div><div class="line">      <span class="keyword">if</span> @query_string.present?</div><div class="line">        @posts = search_params    <span class="comment">#搜索post的关键词</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    protected  <span class="comment"># 放在最后</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_search_key</span></span></div><div class="line">       <span class="comment"># gsub 是Ruby中正则表达式的方法，它会切换所有匹配到的部分</span></div><div class="line">       @query_string = params[<span class="symbol">:q</span>].gsub(<span class="regexp">/\\|\'|\/|\?/</span>, <span class="string">""</span>)<span class="keyword">if</span> params[<span class="symbol">:q</span>].present?  </div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_params</span>      </span></div><div class="line">      Post.ransack(&#123;<span class="symbol">:title_or_content_cont</span> =&gt; @query_string&#125;).result(<span class="symbol">distinct:</span> <span class="literal">true</span>)</div><div class="line">      <span class="comment">#title与content是post的两个栏位，而我们的关键词出自这里</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="第三歩"><a href="#第三歩" class="headerlink" title="第三歩"></a>第三歩</h3><p><strong>views的设定</strong></p><h4 id="1、导航栏的显示"><a href="#1、导航栏的显示" class="headerlink" title="1、导航栏的显示"></a>1、导航栏的显示</h4><figure class="highlight ruby"><figcaption><span>app/views/common/_navbar.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt;</div><div class="line"> +  &lt;ul class="nav navbar-nav"&gt;</div><div class="line"> +    &lt;li&gt;</div><div class="line"> +        &lt;div class="form-group form-inline search-bar"&gt;</div><div class="line"> +          &lt;%= render <span class="symbol">:partial</span> =&gt; <span class="string">"posts/search_bar"</span>%&gt;</div><div class="line"> +       &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp"> +      &lt;/li</span>&gt;</div><div class="line"> +  &lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp"> …… 略</span></div><div class="line"><span class="regexp">&lt;/div</span>&gt;</div></pre></td></tr></table></figure><p>执行<code>$ touch app/views/posts/_search_bar.html.erb</code>,并编辑<br><figure class="highlight ruby"><figcaption><span>app/views/posts/_search_bar.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> &lt;div class="row"&gt;</div><div class="line">  &lt;div class="col-sm-9 col-lg-8 col-lg-offset-2"&gt;</div><div class="line">    &lt;%= form_tag search_posts_path, <span class="symbol">:class</span> =&gt; <span class="string">"posts-search-form"</span>, <span class="symbol">:method</span> =&gt; <span class="symbol">:get</span> <span class="keyword">do</span> %&gt;</div><div class="line">      &lt;div class="input-group"&gt;</div><div class="line">        &lt;input type="text" class="form-control search-bar-input" name="q" value="&lt;%= params[:q] %&gt;" placeholder="关键词"&gt;</div><div class="line">        &lt;span class="input-group-btn"&gt;</div><div class="line">          &lt;button type="submit" class="btn btn-default search-bar-submit"&gt;</div><div class="line">            &lt;span class="glyphicon glyphicon-search"&gt;&lt;/span&gt;</div><div class="line">          &lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">        &lt;/span</span>&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;% end %&gt;</span></div><div class="line"><span class="regexp">  &lt;/div</span>&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p><p><strong>2.搜索反馈页面</strong><br>新增 <code>app/views/posts/search.html.erb</code><br><figure class="highlight ruby"><figcaption><span>app/views/posts/search.html.erb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;div class="minHeight1000 bg-gray"&gt;</div><div class="line">  &lt;div class="search-page w1200 pt30 bc"&gt;</div><div class="line">      &lt;% <span class="keyword">if</span> @posts.present? %&gt;</div><div class="line">        &lt;h5 class="collection search-count"&gt;已为您找到&lt;%= @posts.count %&gt;篇相关文章&lt;/h5&gt;</div><div class="line">      &lt;% <span class="keyword">else</span> %&gt;</div><div class="line">        &lt;p class="tc mt100"&gt;未搜索到任何文章，要不换个关键词试试？&lt;/p&gt;</div><div class="line">      &lt;% <span class="keyword">end</span> %&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">  &lt;div class="container"&gt;</span></div><div class="line"><span class="regexp">  &lt;% @posts.each do |post| %&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    &lt;div class="panel panel-default"&gt;</span></div><div class="line"><span class="regexp">      &lt;div class="panel-body"&gt;</span></div><div class="line"><span class="regexp">        &lt;%= post.title %&gt;</span></div><div class="line"><span class="regexp">        &lt;br/</span>&gt;</div><div class="line">        &lt;br/&gt;</div><div class="line">        &lt;span id="psot-thumbsup-&lt;%= post.id%&gt;" class=" label label-success"&gt;&lt;%= post.likes.count%&gt;👍&lt;/span&gt;</div><div class="line">        &lt;div class="text-right"&gt;</div><div class="line"></div><div class="line">          &lt;% <span class="keyword">if</span> !current_user.is_collect_of?(post) %&gt;</div><div class="line">            &lt;%= link_to(<span class="string">"收藏"</span>, collect_post_path(post), <span class="symbol">method:</span> <span class="symbol">:post</span>, <span class="class"><span class="keyword">class</span>: "<span class="title">btn</span> <span class="title">btn</span>-<span class="title">sm</span>") %&gt;</span></div><div class="line">          &lt;% <span class="keyword">else</span> %&gt;</div><div class="line">            &lt;%= link_to(<span class="string">"取消收藏"</span>, uncollect_post_path(post), <span class="symbol">method:</span> <span class="symbol">:post</span>, <span class="class"><span class="keyword">class</span>: "<span class="title">btn</span> <span class="title">btn</span>-<span class="title">sm</span>") %&gt;</span></div><div class="line">          &lt;% <span class="keyword">end</span> %&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">      &lt;/div</span>&gt;</div><div class="line"></div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">  &lt;% end %&gt;</span></div><div class="line"><span class="regexp">  &lt;/div</span>&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p><p>效果图<br>   <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhcsoezlm4j31bw0g9gmw.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇教程基于自己的一个小项目，用户可以搜索网站上其他用户发表过的文章。&lt;/p&gt;
&lt;h3 id=&quot;第一歩：&quot;&gt;&lt;a href=&quot;#第一歩：&quot; class=&quot;headerlink&quot; title=&quot;第一歩：&quot;&gt;&lt;/a&gt;第一歩：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;安装gem ransa
      
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
      <category term="ransack" scheme="http://yoursite.com/tags/ransack/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/06/hello-world/"/>
    <id>http://yoursite.com/2017/09/06/hello-world/</id>
    <published>2017-09-06T09:33:31.000Z</published>
    <updated>2017-09-06T09:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
