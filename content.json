{"meta":{"title":"jonathan-fei.pro","subtitle":null,"description":"Stay hungry. Stay foolish.","author":"jonathan-fei","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-12-30T12:21:04.000Z","updated":"2017-12-30T12:21:51.399Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-12-30T12:23:01.000Z","updated":"2017-12-30T12:23:14.179Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"注册与登录","slug":"注册与登录","date":"2017-12-21T13:15:56.000Z","updated":"2017-12-30T12:24:12.991Z","comments":true,"path":"2017/12/21/注册与登录/","link":"","permalink":"http://yoursite.com/2017/12/21/注册与登录/","excerpt":"","text":"rails 中的gem devise提供了注册与登录的功能，用起来比较方便。但是为了自身编程能力，决定学习如何自写出注册与登录功能。 注册功能用户注册即创建一个用户，这时会用到我们所熟知的CRUD。理解起来很容易，但是做起来并没有那么简单。 首先需要生成user的model，并对其字段进行约束，通常情况下，会是name与email，例如name与email都不为空、长度、格式，为邮箱加索引等，把这些设置好之后，需要设置路由，控制器，还有视图。 Model约束字段。例如name与email的长度、格式、不为空，密码长度等，且为邮箱加索引。 routes.rb设置注册路由，一般会是get &#39;/signup&#39;, to: &#39;users#new&#39; post &#39;/signup&#39;, to: &#39;users#create&#39; Views设置注册表单。其中会用到form_for或者 simple_form_for Controllers编写users#new与 users#create 验证用户验证用户会用密码，因为我们会为user增加一个字段名称password_digest，在user的model中，添加has_secure_password这个方法（因为has_secure_password这个方法调用唯一要求就是对应的model中有password_digest 字段），它有三个作用: (1) 在数据库层中的password_digest中存储安全的密码哈希值（2）获得一对虚拟属性，password password_confirmation,而且创建对象时会执行存在性验证和匹配验证（3）获得authenticate方法，如果密码正确，返回用户对象，如果密码错误，返回false。 要想生成不可逆的密码哈希值，我们需要用到gem &#39;bcrypt&#39;,它的作用就是生成哈希密码值。这样即使‘脱库’，用户的真实密码也不会丢失。","categories":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/categories/Ruby/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/tags/Ruby/"},{"name":"用户系统","slug":"用户系统","permalink":"http://yoursite.com/tags/用户系统/"}]},{"title":"部分gem总结","slug":"部分gem总结","date":"2017-09-06T17:54:55.000Z","updated":"2017-12-30T12:24:57.292Z","comments":true,"path":"2017/09/07/部分gem总结/","link":"","permalink":"http://yoursite.com/2017/09/07/部分gem总结/","excerpt":"","text":"1.gem ‘devise’ ———————————— 登录系统 安装须知： 依次执行bundle install rails g devise:install rails g devise user rake db:migrate，最后重新rails s。 2.gem ‘bootstrap’ ———————————— 前端开发套件 安装须知：(1) 依次执行bundle install mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss;(2) app/assets/stylesheets/application.scss123+@import \"bootstrap-sprockets\";+@import \"bootstrap\"; 最后重新rails s 3.gem ‘simple_form’ ———————————— 简化表单 安装须知： 依次执行bundle install rails g simple_form:install --bootstrap,最后重新rails s 4.gem ‘font-awesome-rails’ ———————————— 图标套件 安装须知 （1）bundle install ,重新rails s（2） app/assets/stylesheets/application.scss1@import \"font-awesome\"; 5.gem ‘better_errors’ ———————————— 更好的显示错误讯息 安装须知 bundle install 重启rails s 6.gem ‘annotate’ ———————————— 在主要用于model中显示栏位 安装须知 bundle install 重启rails s执行annotate --exclude tests,fixtures,factories,serializers,ps：每次新增栏位后，都要执行这个命令，才会在具体model里显示出所有建立的栏位提示。 7.gem ‘awesome_rails_console’ —————————- 让“金手指”变好看的套件 安装须知 bundle install 重启rails s 8.gem ‘carrier_wave’ gem ‘mini_magick’ ———————————— 用于上传图片（可能还有其他的功能） 安装须知 依次执行：bundle install rails g uploader image 重启rails s","categories":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/categories/Ruby/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/tags/Ruby/"},{"name":"Gem","slug":"Gem","permalink":"http://yoursite.com/tags/Gem/"}]},{"title":"两种方法实现收藏或者点赞功能","slug":"两种方法实现收藏或者点赞功能","date":"2017-09-06T16:30:24.000Z","updated":"2018-01-02T14:24:18.694Z","comments":true,"path":"2017/09/07/两种方法实现收藏或者点赞功能/","link":"","permalink":"http://yoursite.com/2017/09/07/两种方法实现收藏或者点赞功能/","excerpt":"","text":"收藏功能与点赞功能的实作十分类似，本文以购物车教程实作收藏功能为例。 方法一：step1一个用户可以收藏多个商品，一个商品可以被收藏很多次，因此这是多对多的关系。因此需要新增一个model，来当做product与suer的桥梁。$ rails g model collect user_id:integer product_id:integer,然后执行 rake db:migrate，然后为collect、user与product这三个model加上关联。 app/models/collect.rb123456789 + belongs_to :user + belongs_to :product``` ``` ruby app/models/product.rb + has_many :collects + has_many :collected_users, through: :collects, source: :user app/models/user.rb1234567891011121314151617181920 + has_many :collects + has_many :collected_products, through: :collects, source: :product #加上是否收藏商品的判定 + def is_collect_of?(product) + collected_products.include?(product) + end``` #### step2首先修改路由信息：``` ruby config/routes.rb + resources :product do + member do + post :collect + post :uncollect + end + end 在controller里加上对应的method， app/controllers/product_controllers.rb1234567891011121314+ def collect + @product = Product.find(params[:id]) + current_user.collected_products &lt;&lt; @product + flash[:notice] = \"成功收藏商品\" + redirect_to :back+ end+ def uncollect + @product = Product.find(params[:id]) + currrent_user.collected_products.delete(@product) + flash[:warning] = \"您已取消收藏该商品\" + redirect_to :back+ end step3在views中的相应位置加入收藏的显示 app/views/products/show.html.erb123456+ &lt;% if current_user &amp;&amp; current_user.is_collect_of?(@product) %&gt;+ &lt;%= link_to(“取消收藏”, uncollect_product_path(@product), :method =&gt; :post, class: \"btn btn-danger btn-lg\" )%&gt;+ &lt;% else %&gt;+ &lt;%= link_to(\"收藏“, collect_product_path(@product), :method =&gt; :post, class: \"btn btn-danger btn-lg\" )%&gt;+ &lt;% end %&gt; 方法二step1同样，终端执行 rails g model colloect, 编辑 db/migrate/XXXXXXXX_create_collects.rbdb/migrate/XXXXXXXX_create_collects.rb 123456789 class CreateCollects &lt; ActiveRecord::Migration[5.0] def change create_table :collects do |t|+ t.integer :user_id, :index =&gt; true+ t.integer :product_id, :index =&gt; true t.timestamps end end end 之后执行 rake db:migrate 编辑app/models/collect.rb,加上关联app/models/collect.rb12+ belongs_to :user+ belongs_to :product 编辑 app/models/product.rb,加上关联app/models/product.rb123456789101112 + has_many :collects, :dependent =&gt; :destroy + had_many :collected_users, through: :collects, source: :user + def find_collect(user) + self.collects.where( :user_id =&gt; user.id).first + end``` 编辑 `app/model/user.rb`,加上关联``` ruby app/models/user.rb + has_many :collects, :dependent =&gt; :destroy + has_many :collected_products, through: :collects, source: :product step2编辑路由信息config/routes.rb123456+ resource :products do+ member do+ post :collect+ post :uncollect+ end+ end 在controller中添加：app/controllers/product_controller.rb12345678910111213141516+ def collect + @product = Product.find(params[:id]) + unless @product.find_collect(cuurent_user) + Collect.create( :user =&gt; current_user, :product =&gt; @product) + flash[:notice] = \"您已成功收藏该商品\" + end + redirect_to :back+ end+ def uncollect + @product = Product.find(params[:id]) + collect = @product.find_collect(current_user) + collect.destroy + flash[:warning] = \"您已取消收藏该商品\" + redirect_to :back+ end Step3最后一歩，就是要在 app/views/products/show.html.erb中加上收藏的按钮 app/views/products/show.html.erb123456789……略 + &lt;% if current_user %&gt; + &lt;% if @product.find_collect(current_user)%&gt; + &lt;% =link_to(\"取消收藏\", uncollect_product_path(@product), :method =&gt; :post, class: \"btn btn-danger btn-lg\")%&gt; + &lt;% else %&gt; + &lt;%= link_to(\"收藏\", collect_product_path(@product), :method =&gt; :post, class: \"btn btn-primary btn-lg\")%&gt; + &lt;% end %&gt; + &lt;% end %&gt;……略 成果展示","categories":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/categories/Ruby/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/tags/Ruby/"}]},{"title":"利用ransack做搜索功能","slug":"利用ransack做搜索功能","date":"2017-09-06T16:27:42.000Z","updated":"2017-12-30T15:30:27.831Z","comments":true,"path":"2017/09/07/利用ransack做搜索功能/","link":"","permalink":"http://yoursite.com/2017/09/07/利用ransack做搜索功能/","excerpt":"","text":"本篇教程基于自己的一个小项目，用户可以搜索网站上其他用户发表过的文章。 第一歩：安装gem ransack ransack会用数据库的LIKE语法来做搜寻，虽然比较方便，但它会依次检查资料是否符合，而不会使用数据库的索引。如果数据比较庞大的话，利用ransack将不会是一个好的选择。这时候我们就可以安装专门的全文搜索引擎，例如Elasticsearch Gemfile1+ gem 'ransack' $ bundle，重启 rails s 第二歩controller与config的设定 1、设置路由config/routes.rb1234567891011121314151617181920212223242526272829303132333435 Rails.application.routes.draw do devise_for :users resources :posts do + collection do #我们会搜索出所有符合关键字的文章，结果为复数，因此用collection，而不是member + get :search + end end end ``` #### 2、设置controller主要设置通过哪些关键词进行搜索。```ruby app/controllers/posts_controller.rb class PostsController &lt; ApplicationController before_action :validate_search_key, only: [:search] def search if @query_string.present? @posts = search_params #搜索post的关键词 end end protected # 放在最后 def validate_search_key # gsub 是Ruby中正则表达式的方法，它会切换所有匹配到的部分 @query_string = params[:q].gsub(/\\\\|\\'|\\/|\\?/, \"\")if params[:q].present? end def search_params Post.ransack(&#123;:title_or_content_cont =&gt; @query_string&#125;).result(distinct: true) #title与content是post的两个栏位，而我们的关键词出自这里 end end 第三歩views的设定 1、导航栏的显示app/views/common/_navbar.html.erb12345678910 &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt; + &lt;ul class=\"nav navbar-nav\"&gt; + &lt;li&gt; + &lt;div class=\"form-group form-inline search-bar\"&gt; + &lt;%= render :partial =&gt; \"posts/search_bar\"%&gt; + &lt;/div&gt; + &lt;/li&gt; + &lt;/ul&gt; …… 略&lt;/div&gt; 执行$ touch app/views/posts/_search_bar.html.erb,并编辑app/views/posts/_search_bar.html.erb1234567891011121314 &lt;div class=\"row\"&gt; &lt;div class=\"col-sm-9 col-lg-8 col-lg-offset-2\"&gt; &lt;%= form_tag search_posts_path, :class =&gt; \"posts-search-form\", :method =&gt; :get do %&gt; &lt;div class=\"input-group\"&gt; &lt;input type=\"text\" class=\"form-control search-bar-input\" name=\"q\" value=\"&lt;%= params[:q] %&gt;\" placeholder=\"关键词\"&gt; &lt;span class=\"input-group-btn\"&gt; &lt;button type=\"submit\" class=\"btn btn-default search-bar-submit\"&gt; &lt;span class=\"glyphicon glyphicon-search\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;% end %&gt; &lt;/div&gt;&lt;/div&gt; 2.搜索反馈页面新增 app/views/posts/search.html.erbapp/views/posts/search.html.erb123456789101112131415161718192021222324252627282930313233&lt;div class=\"minHeight1000 bg-gray\"&gt; &lt;div class=\"search-page w1200 pt30 bc\"&gt; &lt;% if @posts.present? %&gt; &lt;h5 class=\"collection search-count\"&gt;已为您找到&lt;%= @posts.count %&gt;篇相关文章&lt;/h5&gt; &lt;% else %&gt; &lt;p class=\"tc mt100\"&gt;未搜索到任何文章，要不换个关键词试试？&lt;/p&gt; &lt;% end %&gt; &lt;/div&gt; &lt;div class=\"container\"&gt; &lt;% @posts.each do |post| %&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-body\"&gt; &lt;%= post.title %&gt; &lt;br/&gt; &lt;br/&gt; &lt;span id=\"psot-thumbsup-&lt;%= post.id%&gt;\" class=\" label label-success\"&gt;&lt;%= post.likes.count%&gt;👍&lt;/span&gt; &lt;div class=\"text-right\"&gt; &lt;% if !current_user.is_collect_of?(post) %&gt; &lt;%= link_to(\"收藏\", collect_post_path(post), method: :post, class: \"btn btn-sm\") %&gt; &lt;% else %&gt; &lt;%= link_to(\"取消收藏\", uncollect_post_path(post), method: :post, class: \"btn btn-sm\") %&gt; &lt;% end %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;% end %&gt; &lt;/div&gt;&lt;/div&gt; 效果图","categories":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/categories/Ruby/"}],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"http://yoursite.com/tags/Ruby/"},{"name":"ransack","slug":"ransack","permalink":"http://yoursite.com/tags/ransack/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-06T09:33:31.000Z","updated":"2017-09-06T09:33:31.000Z","comments":true,"path":"2017/09/06/hello-world/","link":"","permalink":"http://yoursite.com/2017/09/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}